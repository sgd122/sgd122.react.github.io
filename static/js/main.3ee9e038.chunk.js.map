{"version":3,"sources":["MyComponent.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["MyComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","number","_this2","react_default","a","createElement","name","age","onClick","setState","Component","defaultProps","App","style","backgroundColor","border","height","Math","round","random","width","WebkitTransition","MozTransition","msTransition","className","src_MyComponent","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"yNAGMA,cAWL,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAGPQ,MAAQ,CACPC,OAAO,GALUR,wEAQP,IAAAS,EAAAN,KACJ,OACCO,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,4BAAoBT,KAAKJ,MAAMc,MAC/BH,EAAAC,EAAAC,cAAA,2BAAST,KAAKJ,MAAMe,KACpBJ,EAAAC,EAAAC,cAAA,2BAAST,KAAKI,MAAMC,QACpBE,EAAAC,EAAAC,cAAA,UAAQG,QAAS,WACfN,EAAKO,SAAS,CACbR,OAAOC,EAAKF,MAAMC,OAAS,MAF9B,8BAzBaS,aAApBnB,EAEEoB,aAAe,CACrBL,KAAM,6BAmCOf,8BCCAqB,MArCf,WACE,IAEMC,EAAQ,CACZC,gBAAkB,OAClBC,OAAQ,kBACRC,OAAQC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,GAC1CC,MAAQH,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,GAC1CE,iBAAkB,MAClBC,cAAc,MACdC,aAAa,OAEf,OACEpB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,OACbrB,EAAAC,EAAAC,cAAA,8CACAF,EAAAC,EAAAC,cAAA,UAdS,wCAeM,iCACfF,EAAAC,EAAAC,cAAA,OAAKQ,MAAOA,IACZV,EAAAC,EAAAC,cAACoB,EAAD,CAAanB,KAAK,IAAIC,IAAK,KAC3BJ,EAAAC,EAAAC,cAAA,UAAQmB,UAAU,cAChBrB,EAAAC,EAAAC,cAAA,OAAKqB,IAAKC,IAAMH,UAAU,WAAWI,IAAI,SACzCzB,EAAAC,EAAAC,cAAA,SApBO,uCAoBP,QACaF,EAAAC,EAAAC,cAAA,0BADb,wBAGAF,EAAAC,EAAAC,cAAA,KACEmB,UAAU,WACVK,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCjBYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.3ee9e038.chunk.js","sourcesContent":["import React,{ Component }  from 'react';\nimport PropTypes from 'prop-types'; \n\nclass MyComponent extends Component {\n\n\tstatic defaultProps = {\n\t\tname: '기본 이름'\n\t}\n\n\tstatic propTypes = {\n\t\tname:PropTypes.string, //name props 타입을 문자열로 설정\n\t\tage:PropTypes.number.isRequired //\n\t}\n\n\tconstructor(props){\n\t\tsuper(props)\n\t}\n\n\tstate = {\n\t\tnumber:0\n\t}\n\n    render(){\n        return (\n        \t<div>\n\t            <h1>MyComponent => {this.props.name}</h1>\n\t            <p>나이 : {this.props.age}</p>\n\t            <p>숫자 : {this.state.number}</p>\n\t            <button onClick={() => {\n\t            \t\tthis.setState({\n\t            \t\t\tnumber:this.state.number + 1\n\t            \t\t})\n\t            \t}\n\t            }>더하기</button>\n\n            </div>\n        );\n    }\n}\n\n\nexport default MyComponent;","import React,{ Component } from 'react';\nimport MyComponent from './MyComponent'; // MyComponent 파일을 불러옵니다.\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const text = '도울정보기술';\n  const condition = true;\n  const style = {\n    backgroundColor : 'gray',\n    border: '1px solid black',\n    height: Math.round(Math.random() * 300) + 50,\n    width : Math.round(Math.random() * 300) + 50,\n    WebkitTransition: 'all',\n    MozTransition:'all',\n    msTransition:'all',\n  };\n  return (\n    <div className=\"App\">\n      <h1>리액트 안녕!</h1>\n      <h2>{text}</h2>\n      { condition && '보여주세요'} \n      <div style={style}></div>\n      <MyComponent name='3' age={30}/>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          {text}Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}